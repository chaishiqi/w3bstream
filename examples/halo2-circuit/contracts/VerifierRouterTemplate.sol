// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;


contract VerifierRouterTemplate {

    uint256 constant bn254Prime = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 private publicInput;

    function getPublicInput() public view returns (uint256){
        return publicInput;
    }

    function setPublicInput(uint256 _publicInput) public {
        publicInput = _publicInput;
    }

    // verifier is the verification contract, it was generated by circuit.
    function verify(address _verifier, uint256 _projectID, uint256 _taskID, bytes calldata _proof) view public {
        bytes32 _publicInput = uint256ToFr(publicInput);
        bytes32 projectID = uint256ToFr(_projectID);
        bytes32 taskID = uint256ToFr(_taskID);
        bytes memory callData = abi.encodePacked(_publicInput, projectID, taskID, _proof);

        (bool success,) = _verifier.staticcall(callData);
        require(success, "Failed to verify proof");
        // TODO
    }

    function uint256ToFr(uint256 _value) public pure returns (bytes32) {
        return bytes32(_value % bn254Prime);
    }
}
